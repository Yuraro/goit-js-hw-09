{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,kBAChCE,EAAYJ,EAAKE,cAAc,iBAC/BG,EAAcL,EAAKE,cAAc,mBA+BvC,SAASI,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC7BC,YAAW,KACeC,KAAKC,SAAW,GAEtCJ,EAAQ,C,SAAEH,E,MAAUC,EAAOO,SAAS,IAEpCJ,EAAO,C,SAAEJ,E,MAAUC,EAAOO,SAAS,GAAQ,GAE5CP,EAAM,G,CAtCbR,EAAKgB,iBAAiB,UAAUC,MAAOC,IACnCA,EAAMC,iBAEN,MAAMX,EAAQY,SAASjB,EAAWkB,OAC5BC,EAAOF,SAAShB,EAAUiB,OAC1BE,EAASH,SAASf,EAAYgB,OAExC,GAAIG,MAAMhB,IAAUgB,MAAMF,IAASE,MAAMD,IAAWf,EAAQ,GAAKc,EAAO,GAAKC,EAAS,EAElF,YADAE,EAAA3B,GAAS4B,OAAOC,QAAQ,iDAIxB,MAAMC,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAQM,IAAK,CAClC,MAAMC,EAAUxB,EAAcuB,EAAGrB,EAAQc,GAAQO,EAAI,IACrDD,EAASG,KAAKD,E,CAElB,IACI,MACME,SADgBvB,QAAQwB,IAAIL,IACCM,QAAQC,GAAWA,EAAOpB,UACvDqB,EAAcJ,EAAmBA,EAAmBK,OAAS,GAC7DC,EAAmBF,EAAcA,EAAY5B,MAAQ,EAC3DiB,EAAA3B,GAAS4B,OAAOX,QAAQ,yBAAyBiB,EAAmBK,6CAA6CC,O,CACnH,MAAOC,GACLC,QAAQD,MAAMA,GACdd,EAAA3B,GAAS4B,OAAOC,QAAQ,8B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('[name=\"delay\"]');\nconst stepInput = form.querySelector('[name=\"step\"]');\nconst amountInput = form.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', async (event) => {\n    event.preventDefault();\n\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\nif (isNaN(delay) || isNaN(step) || isNaN(amount) || delay < 0 || step < 0 || amount < 0) {\n    Notiflix.Notify.failure('Invalid input. Please enter positive numbers.');\n    return;\n}\n\n    const promises = [];\n    for (let i = 1; i <= amount; i++) {\n    const promise = createPromise(i, delay + step * (i - 1));\n    promises.push(promise);\n    }\ntry {\n    const results = await Promise.all(promises);\n    const successfulPromises = results.filter((result) => result.success);\n    const lastPromise = successfulPromises[successfulPromises.length - 1];\n    const lastPromiseDelay = lastPromise ? lastPromise.delay : 0;\n    Notiflix.Notify.success(`Successfully resolved ${successfulPromises.length} promises. Last promise resolved in ${lastPromiseDelay}ms.`);\n} catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Failed to resolve promises.');\n}\n});\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n    setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n        resolve({ position, delay, success: true });\n    } else {\n        reject({ position, delay, success: false });\n    }\n    }, delay);\n});\n};\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","success","addEventListener","async","event","preventDefault","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","promises","i","promise","push","successfulPromises","all","filter","result","lastPromise","length","lastPromiseDelay","error","console"],"version":3,"file":"03-promises.7db82020.js.map"}