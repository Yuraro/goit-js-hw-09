{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,kBAChCE,EAAYJ,EAAKE,cAAc,iBAC/BG,EAAcL,EAAKE,cAAc,mBAEvCF,EAAKM,iBAAiB,UAAWC,IAC7BA,EAAMC,iBAEN,MAAMC,EAAQC,SAASP,EAAWQ,OAC5BC,EAAOF,SAASN,EAAUO,OAC1BE,EAASH,SAASL,EAAYM,OAEpC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,IAAWJ,EAAQ,GAAKG,EAAO,GAAKC,EAAS,EAElF,YADAE,EAAAjB,GAASkB,OAAOC,QAAQ,iDAI5B,MAAMC,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAQM,IAAK,CAC9B,MAAMC,EAAU,IAAIC,SAAQ,CAACC,EAASC,KAClC,MAAMC,EAAef,EAAQG,GAAQO,EAAI,GACzCM,YAAW,KACeC,KAAKC,SAAW,IAElCL,EAAQ,CAAEM,SAAUT,EAAGV,MAAOe,EAAcK,SAAS,IACrDd,EAAAjB,GAASkB,OAAOa,QAAQ,WAAWV,iBAAiBK,UAEpDD,EAAO,CAAEK,SAAUT,EAAGV,MAAOe,EAAcK,SAAS,IACpDd,EAAAjB,GAASkB,OAAOC,QAAQ,WAAWE,iBAAiBK,Q,GAEzDA,EAAa,IAEpBN,EAASY,KAAKV,E,CAGlBC,QAAQU,IAAIb,GACPc,MAAMC,IACH,MAAMC,EAAqBD,EAAQE,QAAQC,GAAWA,EAAOP,UACvDQ,EAAcH,EAAmBA,EAAmBI,OAAS,GAC7DC,EAAmBF,EAAcA,EAAY5B,MAAQ,EAC3DM,EAAAjB,GAASkB,OAAOa,QAAQ,yBAAyBK,EAAmBI,6CAA6CC,OAAsB,IAE1IC,OAAOC,IACJC,QAAQD,MAAMA,GACd1B,EAAAjB,GAASkB,OAAOC,QAAQ,8BAA8B,GACxD","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('[name=\"delay\"]');\nconst stepInput = form.querySelector('[name=\"step\"]');\nconst amountInput = form.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    if (isNaN(delay) || isNaN(step) || isNaN(amount) || delay < 0 || step < 0 || amount < 0) {\n        Notiflix.Notify.failure('Invalid input. Please enter positive numbers.');\n        return;\n    }\n\n    const promises = [];\n    for (let i = 1; i <= amount; i++) {\n        const promise = new Promise((resolve, reject) => {\n            const promiseDelay = delay + step * (i - 1);\n            setTimeout(() => {\n                const shouldResolve = Math.random() > 0.3;\n                if (shouldResolve) {\n                    resolve({ position: i, delay: promiseDelay, success: true });\n                    Notiflix.Notify.success(`Promise ${i} resolved in ${promiseDelay}ms.`);\n                } else {\n                    reject({ position: i, delay: promiseDelay, success: false });\n                    Notiflix.Notify.failure(`Promise ${i} rejected in ${promiseDelay}ms.`);\n                }\n            }, promiseDelay);\n        });\n        promises.push(promise);\n    }\n\n    Promise.all(promises)\n        .then((results) => {\n            const successfulPromises = results.filter((result) => result.success);\n            const lastPromise = successfulPromises[successfulPromises.length - 1];\n            const lastPromiseDelay = lastPromise ? lastPromise.delay : 0;\n            Notiflix.Notify.success(`Successfully resolved ${successfulPromises.length} promises. Last promise resolved in ${lastPromiseDelay}ms.`);\n        })\n        .catch((error) => {\n            console.error(error);\n            Notiflix.Notify.failure('Failed to resolve promises.');\n        });\n});\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","addEventListener","event","preventDefault","delay","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","promises","i","promise","Promise","resolve","reject","promiseDelay","setTimeout","Math","random","position","success","push","all","then","results","successfulPromises","filter","result","lastPromise","length","lastPromiseDelay","catch","error","console"],"version":3,"file":"03-promises.c18807c6.js.map"}