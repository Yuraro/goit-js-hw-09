{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,kBAChCE,EAAYJ,EAAKE,cAAc,iBAC/BG,EAAcL,EAAKE,cAAc,mBAEvCF,EAAKM,iBAAiB,UAAU,SAACC,G,kBAczB,IAAMC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GAClC,IAAMC,EAAeC,EAAQC,GAAQC,EAAI,GACzCC,YAAW,WACeC,KAAKC,SAAW,IAElCR,EAAQ,CAAES,SAAUJ,EAAGF,MAAOD,EAAcQ,SAAS,IACrDC,EAAAvB,GAASwB,OAAOF,QAAQ,WAA4BG,OAAjBR,EAAE,iBAA4BQ,OAAbX,EAAa,UAEjED,EAAO,CAAEQ,SAAUJ,EAAGF,MAAOD,EAAcQ,SAAS,IACpDC,EAAAvB,GAASwB,OAAOE,QAAQ,WAA4BD,OAAjBR,EAAE,iBAA4BQ,OAAbX,EAAa,Q,GAEtEA,E,IAEPa,EAASC,KAAKlB,E,EA1BlBD,EAAMoB,iBAEN,IAAMd,EAAQe,SAASzB,EAAW0B,OAC5Bf,EAAOc,SAASxB,EAAUyB,OAC1BC,EAASF,SAASvB,EAAYwB,OAEpC,GAAIE,MAAMlB,IAAUkB,MAAMjB,IAASiB,MAAMD,IAAWjB,EAAQ,GAAKC,EAAO,GAAKgB,EAAS,EAClFT,EAAAvB,GAASwB,OAAOE,QAAQ,qDAD5B,CAMA,IADA,IAAMC,EAAW,GACRO,EAAI,EAAGA,GAAKF,EAAQE,IAAGC,EAAAD,GAiBhCvB,QAAQyB,IAAIT,GACPU,MAAK,SAACC,GACH,IAAMC,EAAqBD,EAAQE,QAAO,SAACC,G,OAAWA,EAAOnB,O,IACvDoB,EAAcH,EAAmBA,EAAmBI,OAAS,GAC7DC,EAAmBF,EAAcA,EAAY3B,MAAQ,EAC3DQ,EAAAvB,GAASwB,OAAOF,QAAQ,yBAAyFG,OAAhEc,EAAmBI,OAAO,wCAAuDlB,OAAjBmB,EAAiB,O,IAErIC,OAAM,SAACC,GACJC,QAAQD,MAAMA,GACdvB,EAAAvB,GAASwB,OAAOE,QAAQ,8B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('[name=\"delay\"]');\nconst stepInput = form.querySelector('[name=\"step\"]');\nconst amountInput = form.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    if (isNaN(delay) || isNaN(step) || isNaN(amount) || delay < 0 || step < 0 || amount < 0) {\n        Notiflix.Notify.failure('Invalid input. Please enter positive numbers.');\n        return;\n    }\n\n    const promises = [];\n    for (let i = 1; i <= amount; i++) {\n        const promise = new Promise((resolve, reject) => {\n            const promiseDelay = delay + step * (i - 1);\n            setTimeout(() => {\n                const shouldResolve = Math.random() > 0.3;\n                if (shouldResolve) {\n                    resolve({ position: i, delay: promiseDelay, success: true });\n                    Notiflix.Notify.success(`Promise ${i} resolved in ${promiseDelay}ms.`);\n                } else {\n                    reject({ position: i, delay: promiseDelay, success: false });\n                    Notiflix.Notify.failure(`Promise ${i} rejected in ${promiseDelay}ms.`);\n                }\n            }, promiseDelay);\n        });\n        promises.push(promise);\n    }\n\n    Promise.all(promises)\n        .then((results) => {\n            const successfulPromises = results.filter((result) => result.success);\n            const lastPromise = successfulPromises[successfulPromises.length - 1];\n            const lastPromiseDelay = lastPromise ? lastPromise.delay : 0;\n            Notiflix.Notify.success(`Successfully resolved ${successfulPromises.length} promises. Last promise resolved in ${lastPromiseDelay}ms.`);\n        })\n        .catch((error) => {\n            console.error(error);\n            Notiflix.Notify.failure('Failed to resolve promises.');\n        });\n});\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","event","promise","Promise","resolve","reject","promiseDelay","delay","step","i","setTimeout","Math","random","position","success","$parcel$interopDefault","Notify","concat","failure","promises","push","preventDefault","parseInt","value","amount","isNaN","i1","_loop","all","then","results","successfulPromises","filter","result","lastPromise","length","lastPromiseDelay","catch","error","console"],"version":3,"file":"03-promises.ec3cc1a3.js.map"}